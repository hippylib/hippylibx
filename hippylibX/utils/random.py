import numpy as np

def parRandom(comm,noise_variance,d):
    """
    comm -> communicator
    noise_variance -> the variance of the normal distribution used to perturb the vector associated with the function d
    d -> this vector will be perturbed with the noise #petsc4py.PETSc.Vec object
    """

    rank  = comm.rank
    nproc = comm.size

    glb_num_vals = d.getSize()
    
    #setting seed value
    master_seed = 123
    seed_sequence = np.random.SeedSequence(master_seed)
    
    #Assigning seeds to each process
    child_seeds = seed_sequence.spawn(nproc)
    rng = np.random.MT19937(child_seeds[rank])
    
    #number of random values that most processes is expected to generate
    # and assign to d 
    #glb_num_vals/nproc + 1 values will be generated by (glb_num_vals % nproc) processes
    #glb_num_vals/nproc values will be generated by the remaning (glb_num_vals/nproc - glb_num_vals%nproc) processes.

    loc_size = glb_num_vals//nproc
    num_procs_type1 = glb_num_vals%nproc 

    if(rank < num_procs_type1):
        loc_size += 1
        lower_index = rank * loc_size
        upper_index = (rank + 1)*loc_size
    else:
        lower_index = num_procs_type1*(loc_size + 1) + (rank - num_procs_type1)*loc_size
        upper_index = num_procs_type1*(loc_size + 1) + (rank - num_procs_type1 + 1)*loc_size
    
    loc_random_numbers = np.random.default_rng(rng).normal(loc=0,scale= np.sqrt(noise_variance),size=loc_size)
    indices = np.arange(lower_index,upper_index,dtype=np.int32)
    d.setValues(indices,loc_random_numbers,addv=True)
    d.assemblyBegin()
    d.assemblyEnd()


